///////////////////////////////////
//Name: Ofer Krupka
//Date - Created:  03/29/2019
//Date - Release:  04/02/2019
//Date - Modified: 04/02/2019
//Brife:
//
// --
//Setup:
//1. Add component - RigidBody.
//2. Add component - IgnoreSpaceEffect.
//3. Add component - BoxCollider.
//4. Adjust parameters.
//5. Upload as archetype.
//6. Update BubbleProjectile to contain this archetype.
//Notes:
//The Timer is since the BubbleProjectile was destroyed.
///////////////////////////////////
//Version: 1.0
//Version date:    04/02/2019
//Version notes:
//Release :)
///////////////////////////////////
class BubbleBigMonster : ZilchComponent
{
  [Property]
  var Player : Cog;
  
  [Property]
  var Destination : Real2;
  
  [Property]
  var BubbleSpeed : Real;
  
  
  [Property]
  var RedSprite : SpriteSource;
  
  [Property]
  var RedTimer : Real = 35;
  
  
  [Property]
  var PopSprite : SpriteSource;
  
  [Property]
  var PopTimer : Real = 5;
  
  
  [Property]
  var SpawnMonster : Archetype;
  
  [Property]
  var SpawnFood : Archetype;
  
  [Property]
  var DeadEnemy : Archetype;
  
  
  [Property]
  var DelayToLetPopAnimationToPlay : Real = 0.2;
  
  [Property]
  var SmallDistanceAntiFlicker : Real = 0.5;
  
  
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    
    //Actions of the bubble
    var seq = Action.Sequence(this.Owner.Actions);
    //Red
    Action.Delay(seq, this.RedTimer);
    Action.Call(seq, this.TurnRed);
    
    //Pop
    Action.Delay(seq, this.PopTimer);
    Action.Call(seq, this.PopAndDestroyedByItself);
  }
  
  //Go to the destination
  function OnLogicUpdate(event : UpdateEvent)
  {
    //Move vertically
    if(this.Owner.Transform.Translation.Y < this.Destination.Y && this.SmallDistanceAntiFlicker < Math.Abs(this.Owner.Transform.Translation.Y - this.Destination.Y))//Move up
    {
      this.Owner.RigidBody.Velocity = Real3(0, this.BubbleSpeed, 0);
    }
    else if(this.Owner.Transform.Translation.Y > this.Destination.Y && this.SmallDistanceAntiFlicker < Math.Abs(this.Owner.Transform.Translation.Y - this.Destination.Y))//Move down
    {
      this.Owner.RigidBody.Velocity = Real3(0, 0-this.BubbleSpeed, 0);
    }
    //Move horizontally
    else
    {
      if(this.Owner.Transform.Translation.X < this.Destination.X && this.SmallDistanceAntiFlicker < Math.Abs(this.Owner.Transform.Translation.X - this.Destination.X))//Move right
      {
        this.Owner.RigidBody.Velocity = Real3(this.BubbleSpeed, 0, 0);
      }
      else if(this.Owner.Transform.Translation.X > this.Destination.X && this.SmallDistanceAntiFlicker < Math.Abs(this.Owner.Transform.Translation.X - this.Destination.X))//Move left
      {
        this.Owner.RigidBody.Velocity = Real3(0-this.BubbleSpeed, 0, 0);
      }
      else//At the right location
      {
        this.Owner.RigidBody.Velocity = Real3(0, 0, 0);
      }
    }
  }
  
  
  //Collide with the player
  function OnCollisionStarted(event : CollisionEvent)
  {
    if(event.OtherObject.Name == "Player")
    {
      //Touching bubble from top/bottom | destroy if touching the top or buttom (looks like x shape)
      if(Math.Abs(this.Owner.Transform.Translation.X - event.OtherObject.Transform.Translation.X)
      <
      Math.Abs(this.Owner.Transform.Translation.Y - event.OtherObject.Transform.Translation.Y))
      {
        this.PopAndDestroyedByPlayer();
      }
    }
  }
  
  
  //Turn to red
  function TurnRed()
  {
    this.Owner.Sprite.SpriteSource = this.RedSprite;
  }
  
  
  //Pop bubble (player)
  function PopAndDestroyedByPlayer()
  {
    var random = Random();
    this.Owner.Destroy();
    var deadEnemy = this.Space.CreateAtPosition(this.DeadEnemy, this.Owner.Transform.Translation);
    deadEnemy.RigidBody.Velocity = Real3(random.Range(-10,10),random.Range(30,40), 0);
  }
  
  //Pop bubble (itself)
  function PopAndDestroyedByItself()
  {
    this.Owner.Collider.Ghost = true;
    this.Owner.Collider.SendsEvents = false;
    
    this.Owner.Sprite.SpriteSource = this.PopSprite;
    this.Owner.Sprite.AnimationActive = false;
    
    var seq = Action.Sequence(this.Owner.Actions);
    var frameCount = this.Owner.Sprite.SpriteSource.FrameCount;
    
    if(frameCount != 1)
    {
      for(var i = 0; i < frameCount-1; ++i)
      {
        Action.Delay(seq, this.DelayToLetPopAnimationToPlay/(frameCount+1));
        Action.Call(seq, this.IncrementFrame);
      }
      Action.Delay(seq, this.DelayToLetPopAnimationToPlay/(frameCount+1));
    }
    else
    {
      Action.Delay(seq, this.DelayToLetPopAnimationToPlay);
    }
    
    Action.Call(seq, this.RespawnMonster);
    Action.Call(seq, this.Owner.Destroy);
  }
  function IncrementFrame()
  {
    ++this.Owner.Sprite.CurrentFrame;
  }
  function RespawnMonster()
  {
    this.Space.CreateAtPosition(this.SpawnMonster, this.Owner.Transform.Translation);
  }
}