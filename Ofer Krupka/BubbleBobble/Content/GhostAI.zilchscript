///////////////////////////////////
//Name: Ofer Krupka
//Date - Created:  04/04/2019
//Date - Release:  04/05/2019
//Date - Modified: 04/05/2019
//Brife:
//This code controls the Ghost to chase the player
//Setup:
//1. Make new Ghost archetype.
//2. Add component - BoxCollider (make sure it dosen't collide with the walls).
//3. Add this component.
//4. Adjust parameters.
//5. Make it spawn on the map.
///////////////////////////////////
//Version: 1.0
//Version date:    04/01/2019
//Version notes:
//Release - It felt rushed, I wish I couldve write it on wednesday, I am sorry for that, I didn't felt well (depression).
///////////////////////////////////
class GhostAI : ZilchComponent
{
  [Property]
  var Target : CogPath;
  
  
  [Property]
  var MovingDistance : Real = 1;
  [Property]
  var MovingDuration : Real = 1;
  [Property]
  var StillDuration : Real = 1;
  
  
  [Property]
  var SpeedUpTimer : Real = 20;
  [Property]
  var SpeedUpMovingDistance : Real = 10;
  [Property]
  var SpeedUpMovingDuration : Real = 1;
  [Property]
  var SpeedUpStillDuration : Real = 1;
  
  [Property]
  var SpawnAndDeathSpeed : Real = 0.75;
  [Property]
  var SpawnAndDeathSprite : SpriteSource;
  [Property]
  var GhostSprite : SpriteSource;
  
  
  var OnLogicUpdateEnabled : Boolean = false;
  var MoveNow : Boolean;
  var MoveNowHorizontally : Boolean;
  
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    
    this.Owner.Sprite.AnimationActive = false;
    this.Owner.Sprite.SpriteSource = this.SpawnAndDeathSprite;
    
    var seq = Action.Sequence(this.Owner.Actions);
    if(this.Owner.Sprite.SpriteSource.FrameCount != 1)
    {
      for(var i = 0; i < this.Owner.Sprite.SpriteSource.FrameCount-1; ++i)
      {
        Action.Delay(seq, this.SpawnAndDeathSpeed/(this.Owner.Sprite.SpriteSource.FrameCount+1));
        Action.Call(seq, this.IncreaseFrame);
      }
      Action.Delay(seq, this.SpawnAndDeathSpeed/(this.Owner.Sprite.SpriteSource.FrameCount+1));
    }
    else
    {
      Action.Delay(seq, this.SpawnAndDeathSpeed);
    }
    Action.Call(seq, this.SwitchToGhostSprite);
    Action.Call(seq, this.Still);
    
    Action.Delay(seq, this.SpeedUpTimer);
    Action.Call(seq, this.SpeedUp);
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    //If not playing death animation
    if(this.OnLogicUpdateEnabled)
    {
      //Flip the ghost to the right (or left, no pun intended) direction based on the players location.
      if(this.Owner.Transform.Translation.X < this.Target.Transform.Translation.X)
        this.Owner.Sprite.FlipX = true;
      else
        this.Owner.Sprite.FlipX = false;
      
      //Move
      if(this.MoveNow)
      {
        //Update movement
        var movement = this.MovingDistance*(event.Dt/this.MovingDuration);
        
        //Horizontal
        if(this.MoveNowHorizontally)
        {
          if(this.Owner.Transform.Translation.X < this.Target.Transform.Translation.X)
          {
            this.Owner.Transform.Translation += Real3(movement , 0, 0);
          }
          else
          {
            this.Owner.Transform.Translation -= Real3(movement, 0, 0);
          }
        }
        //Vertical
        else
        {
          if(this.Owner.Transform.Translation.Y < this.Target.Transform.Translation.Y)
          {
            this.Owner.Transform.Translation += Real3(0, movement, 0);
          }
          else
          {
            this.Owner.Transform.Translation -= Real3(0, movement, 0);
          }
        }
      }
    }
  }
  
  //Update the ghost to move
  function Move()
  {
    this.MoveNow = true;
    
    if(Math.Abs(this.Target.Transform.Translation.X - this.Owner.Transform.Translation.X) > Math.Abs(this.Target.Transform.Translation.Y - this.Owner.Transform.Translation.Y))
      this.MoveNowHorizontally = true;
    else
      this.MoveNowHorizontally = false;
    
    var seq = Action.Sequence(this.Owner.Actions);
    Action.Delay(seq, this.MovingDuration);
    Action.Call(seq, this.Still);
    
  }
  
  //Update the ghost to stay still
  function Still()
  {
    this.MoveNow = false;
    
    var seq = Action.Sequence(this.Owner.Actions);
    Action.Delay(seq, this.StillDuration);
    Action.Call(seq, this.Move);
  }
  
  //Update speed after timer is run out
  function SpeedUp()
  {
    this.MovingDistance = this.SpeedUpMovingDistance;
    Console.WriteLine(this.MovingDistance);
    this.MovingDuration = this.SpeedUpMovingDuration;
    Console.WriteLine(this.MovingDuration);
    this.StillDuration = this.SpeedUpStillDuration;
    Console.WriteLine(this.StillDuration);
  }
  
  function OnCollisionStarted(event : CollisionEvent)
  {
    if(event.OtherObject == this.Target.Cog)
    {
      //Kill player
      this.LevelSettings.TEP_TECH_CS_GameVars.Dead = true;
      //Disappear animation
      this.Death();
    }
  }
  
  //Death animation + destroy
  //Use this instead of destroy
  function Death()
  {
    //Disable on logic update
    this.OnLogicUpdateEnabled = false;
    
    this.Owner.Sprite.AnimationActive = false;
    this.Owner.Sprite.SpriteSource = this.SpawnAndDeathSprite;
    this.Owner.Sprite.CurrentFrame = this.Owner.Sprite.SpriteSource.FrameCount-1;
    
    
    var seq = Action.Sequence(this.Owner.Actions);
    if(this.Owner.Sprite.SpriteSource.FrameCount != 1)
    {
      for(var i = 0; i < this.Owner.Sprite.SpriteSource.FrameCount-1; ++i)
      {
        Action.Delay(seq, this.SpawnAndDeathSpeed/(this.Owner.Sprite.SpriteSource.FrameCount+1));
        Action.Call(seq, this.DecreaseFrame);
      }
      Action.Delay(seq, this.SpawnAndDeathSpeed/(this.Owner.Sprite.SpriteSource.FrameCount+1));
    }
    else
    {
      Action.Delay(seq, this.SpawnAndDeathSpeed);
    }
    Action.Call(seq, this.Owner.Destroy);
  }
  
  //////////////////////////////////
  
  //Swap to ghost sprite (after it spawned)
  function SwitchToGhostSprite()
  {
    this.Owner.Sprite.AnimationActive = true;
    this.OnLogicUpdateEnabled = true;
    this.Owner.Sprite.SpriteSource = this.GhostSprite;
  }
  
  //Increase frame
  function IncreaseFrame()
  {
    ++this.Owner.Sprite.CurrentFrame;
  }
  
  //Decrease frame
  function DecreaseFrame()
  {
    ++this.Owner.Sprite.CurrentFrame;
  }
}
