/*
Cody Spring

add this to the level settings so enemies will Spawn

when added to the plus level it will ensure infinite rounds
*/


class TEP_TECH_CS_SpawnEnemies : ZilchComponent
{
  [Property]
  var EnemyToSpawn : Archetype = null;
  
  var I : Real = 0;
  
  var SpawnTimer : Real = 0.25;
  
  var AllSpawned : Boolean = false;
  
  [Property]
  var WinText : CogPath = null;
  
  [Property]
  var WinSound : SoundCue = null;
  
  [Property]
  var NumberOfE : Real = 3;
  
  [Property]
  var MenuLevel : Level = null;
  
  var Played : Boolean = false;
  
  [Property]
  var Plus : Level = null;
  
  var WinTimer : Real = 0;
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    this.SpawnTimer -= event.Dt;
      //spawn specified amount of enemies over time
      if(this.SpawnTimer <= 0 && this.LevelSettings.TEP_TECH_CS_GameVars.NumberOfEnemies < this.NumberOfE && this.AllSpawned == false)
      {
        this.LevelSettings.TEP_TECH_CS_GameVars.NumberOfEnemies += 1;
        var enemy = this.Space.CreateAtPosition(this.EnemyToSpawn, Real3(0,10.8333,0.1)); 
        this.SpawnTimer = 0.3;
      }
      //make sure no more than intended spawn
      if(this.LevelSettings.TEP_TECH_CS_GameVars.NumberOfEnemies == this.NumberOfE)
      {
        this.AllSpawned = true;
      }
      //add one enemy (on plus level) when new wave starts
      if(this.LevelSettings.TEP_TECH_CS_GameVars.NumberOfEnemies <= 0 && this.Space.CurrentLevel == this.Plus && this.AllSpawned == true)
      {
        this.NumberOfE += 1;
        this.AllSpawned = false;
      }
      
      if(this.LevelSettings.TEP_TECH_CS_GameVars.NumberOfEnemies <= 0 && this.Space.CurrentLevel != this.Plus)
      {
        //win timer when player kills all enemies
        this.WinTimer += event.Dt;
        if(this.WinTimer >= 5)
        {
          if(this.Played == false)
          {
            this.Space.SoundSpace.PlayCue(this.WinSound);
            this.Played = true;
          }
          this.WinText.SpriteText.VertexColor = Real4(255, 0,214, 1);
          if(this.WinTimer >= 10)
          this.Space.LoadLevel(this.MenuLevel);
        }
      }
    
  }
}
